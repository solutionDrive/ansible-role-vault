---
- name: "Install required packages"
  package:
    name: "{{ item }}"
    state: present
  with_items: "{{ vault_required_packages }}"

- name: "Download Zip-Archive for version {{ vault_app_version }}"
  get_url:
    url: "{{ vault_app_url }}"
    dest: "{{ vault_app_download_location }}/{{ vault_app_zip }}"
    checksum: "{{ vault_app_checksum }}"

- name: "Unzip Vault Archive - {{ vault_app_version }}"
  unarchive:
    src: "{{ vault_app_download_location }}/{{ vault_app_zip }}"
    remote_src: yes
    dest: "{{ vault_exec_path }}"
    mode: "u+rwx"
    owner: solution
    creates: /usr/local/bin/vault

- name: "Create folder for holding configuration of the vault"
  file:
    path: "{{ vault_configuration_path }}"
    state: directory
    mode: "u=rwx,g=rwx,o=rx"

- name: "Create file for holding the environment-variables of the vault service"
  template:
    src: .env.j2
    dest: "{{ vault_configuration_path }}/{{ vault_env_file_name }}"
    mode: "u=rwx,g=rwx,o=r"
  register: deamon_reload
  notify:
  - reload systemd daemon

- name: "Create configuration file based on template"
  template:
    src: vault_config.hcl.j2
    dest: "{{ vault_configuration_path }}/config.hcl"
    mode: "u=rwx,g=rwx,o=r"
  register: service_restart
  notify:
  - restart vault

- name: "create service for vault server"
  template:
    src: vault.service.j2
    dest: /lib/systemd/system/vault.service
    mode: 0644
  register: service_restart
  notify:
  - restart vault

- name: link service
  file:
    src: /lib/systemd/system/vault.service
    path: /etc/systemd/system/multi-user.target.wants/vault.service
    state: link
  notify:
  - reload systemd daemon
  - restart vault
